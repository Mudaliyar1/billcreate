<%- include('../partials/header') %>

<div class="container-fluid">
  <div class="row">
    <!-- Sidebar -->
    <div class="col-md-3 col-lg-2 d-md-block bg-dark">
      <%- include('../partials/sidebar', { path: '/bills/create' }) %>
    </div>

    <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
      <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Create Bill</h1>
        <div class="btn-toolbar mb-2 mb-md-0">
          <a href="/bills" class="btn btn-sm btn-outline-secondary">
            <i class="fas fa-arrow-left"></i> Back to Bills
          </a>
        </div>
      </div>

      <div class="row mb-4">
        <div class="col-md-12">
          <div class="card">
            <div class="card-header">
              <h5 class="card-title mb-0">Bill Information</h5>
            </div>
            <div class="card-body">
              <form id="billForm" action="/bills/create" method="POST" onsubmit="return validateBillForm()">
                <div class="row mb-4">
                  <div class="col-md-12">
                    <h5>Customer Information</h5>
                    <hr>
                  </div>

                  <div class="col-md-12 mb-3">
                    <label for="customerSearch" class="form-label">Search Customer</label>
                    <div class="input-group mb-3">
                      <input type="text" class="form-control" id="customerSearch" placeholder="Search by name or phone...">
                      <button class="btn btn-outline-secondary" type="button" id="searchCustomerBtn">
                        <i class="fas fa-search"></i>
                      </button>
                    </div>
                    <div id="customerSearchResults" class="list-group mt-2" style="display: none; max-height: 200px; overflow-y: auto; position: absolute; width: 100%; z-index: 1000; box-shadow: 0 4px 8px rgba(0,0,0,0.1); border: 1px solid #ddd;"></div>

                    <script>
                      // Ensure customer search works properly
                      document.addEventListener('DOMContentLoaded', function() {
                        const searchInput = document.getElementById('customerSearch');
                        const searchBtn = document.getElementById('searchCustomerBtn');
                        const resultsContainer = document.getElementById('customerSearchResults');
                        const nameInput = document.getElementById('customerName');
                        const phoneInput = document.getElementById('customerPhone');
                        const placeInput = document.getElementById('customerPlace');
                        const emailInput = document.getElementById('customerEmail');

                        // Function to search customers
                        const searchCustomers = () => {
                          const query = searchInput.value.trim();

                          if (query.length < 2) {
                            resultsContainer.style.display = 'none';
                            return;
                          }

                          resultsContainer.innerHTML = '<div class="list-group-item">Searching...</div>';
                          resultsContainer.style.display = 'block';

                          fetch(`/api/customers/search?query=${encodeURIComponent(query)}`)
                            .then(response => response.json())
                            .then(customers => {
                              resultsContainer.innerHTML = '';

                              if (customers.length === 0) {
                                resultsContainer.innerHTML = '<div class="list-group-item">No customers found</div>';
                              } else {
                                customers.forEach(customer => {
                                  const item = document.createElement('a');
                                  item.href = '#';
                                  item.className = 'list-group-item list-group-item-action';
                                  item.innerHTML = `<strong>${customer.name}</strong> - ${customer.phone} (${customer.place})`;

                                  item.addEventListener('click', (e) => {
                                    e.preventDefault();
                                    nameInput.value = customer.name;
                                    phoneInput.value = customer.phone;
                                    placeInput.value = customer.place;
                                    if (customer.email) {
                                      emailInput.value = customer.email;
                                    }
                                    resultsContainer.style.display = 'none';
                                  });

                                  resultsContainer.appendChild(item);
                                });
                              }
                            })
                            .catch(error => {
                              console.error('Customer search error:', error);
                              resultsContainer.innerHTML = `<div class="list-group-item text-danger">Error: ${error.message}</div>`;
                            });
                        };

                        // Search on button click
                        searchBtn.addEventListener('click', searchCustomers);

                        // Search on Enter key press
                        searchInput.addEventListener('keypress', function(e) {
                          if (e.key === 'Enter') {
                            e.preventDefault();
                            searchCustomers();
                          }
                        });

                        // Search as you type (with debounce)
                        let searchTimeout;
                        searchInput.addEventListener('input', function() {
                          clearTimeout(searchTimeout);
                          searchTimeout = setTimeout(searchCustomers, 300);
                        });
                      });
                    </script>
                  </div>

                  <div class="col-md-3 mb-3">
                    <label for="customerName" class="form-label">Customer Name</label>
                    <input type="text" class="form-control" id="customerName" name="customerName" required>
                  </div>

                  <div class="col-md-3 mb-3">
                    <label for="customerPhone" class="form-label">Phone Number</label>
                    <input type="text" class="form-control" id="customerPhone" name="customerPhone" required>
                  </div>

                  <div class="col-md-3 mb-3">
                    <label for="customerPlace" class="form-label">Place</label>
                    <input type="text" class="form-control" id="customerPlace" name="customerPlace" required>
                  </div>

                  <div class="col-md-3 mb-3">
                    <label for="customerEmail" class="form-label">Email</label>
                    <input type="email" class="form-control" id="customerEmail" name="customerEmail" placeholder="Optional">
                    <small class="form-text text-muted">If provided, bill will be sent to this email</small>
                  </div>

                  <div class="col-md-6 mb-3">
                    <label for="work" class="form-label">Work</label>
                    <input type="text" class="form-control" id="work" name="work" required>
                  </div>

                  <div class="col-md-6 mb-3">
                    <label for="pickedBy" class="form-label">Picked By</label>
                    <input type="text" class="form-control" id="pickedBy" name="pickedBy" required>
                  </div>
                </div>

                <div class="row mb-4">
                  <div class="col-md-12">
                    <h5>Products</h5>
                    <hr>
                  </div>

                  <div class="col-md-12 mb-3">
                    <div id="productContainer">
                      <!-- Product rows will be added here -->
                    </div>

                    <button type="button" id="addProductBtn" class="btn btn-outline-primary">
                      <i class="fas fa-plus"></i> Add Product
                    </button>

                    <script>
                      // Ensure Add Product button works
                      document.addEventListener('DOMContentLoaded', function() {
                        const addBtn = document.getElementById('addProductBtn');
                        const productContainer = document.getElementById('productContainer');

                        // Categories
                        const categories = ['Board', 'Chanel', 'Hardware', 'Bori'];

                        // Function to add product row
                        const addProductRow = () => {
                          console.log('Adding new product row');
                          const productRow = document.createElement('div');
                          productRow.className = 'row product-row mb-3';

                          productRow.innerHTML = `
                            <div class="col-md-3 mb-2">
                              <label class="form-label">Category</label>
                              <select class="form-select category-select" required>
                                <option value="" selected disabled>Select Category</option>
                                ${categories.map(category => `<option value="${category}">${category}</option>`).join('')}
                              </select>
                            </div>

                            <div class="col-md-3 mb-2">
                              <label class="form-label">Product</label>
                              <select class="form-select product-select" name="productIds[]" required>
                                <option value="" selected disabled>Select Product</option>
                              </select>
                            </div>

                            <div class="col-md-2 mb-2">
                              <label class="form-label">Quantity</label>
                              <input type="number" class="form-control quantity-input" name="quantities[]" min="1" value="1" required onchange="updateAmountForRow(this)" oninput="updateAmountForRow(this)">
                            </div>

                            <div class="col-md-2 mb-2">
                              <label class="form-label">Amount (₹)</label>
                              <input type="text" class="form-control product-amount" readonly>
                            </div>

                            <div class="col-md-2 mb-2 d-flex align-items-end">
                              <button type="button" class="btn btn-outline-danger remove-product-btn">
                                <i class="fas fa-trash"></i>
                              </button>
                            </div>
                          `;

                          productContainer.appendChild(productRow);

                          // Add event listener to category select
                          const categorySelect = productRow.querySelector('.category-select');
                          const productSelect = productRow.querySelector('.product-select');
                          const quantityInput = productRow.querySelector('.quantity-input');
                          const amountInput = productRow.querySelector('.product-amount');

                          categorySelect.addEventListener('change', function() {
                            const category = this.value;

                            if (!category) {
                              productSelect.innerHTML = '<option value="" selected disabled>Select Product</option>';
                              productSelect.disabled = true;
                              return;
                            }

                            // Fetch products for selected category
                            console.log(`Fetching products for category: ${category}`);

                            // Try the new API endpoint first
                            fetch(`/api/bill-products/category/${category}`, {
                              method: 'GET',
                              headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                              },
                              credentials: 'same-origin'
                            })
                              .then(response => {
                                console.log('Fetch response status:', response.status);
                                if (!response.ok) {
                                  if (response.status === 401 || response.status === 403) {
                                    // Try the original endpoint as fallback
                                    console.log('Trying original API endpoint as fallback...');
                                    return fetch(`/api/products/category/${category}`, {
                                      method: 'GET',
                                      headers: {
                                        'Accept': 'application/json',
                                        'Content-Type': 'application/json'
                                      },
                                      credentials: 'same-origin'
                                    });
                                  }
                                  throw new Error(`Server error: ${response.status}`);
                                }
                                return response;
                              })
                              .then(response => {
                                if (!response.ok) {
                                  throw new Error(`Server error: ${response.status}`);
                                }
                                return response.json();
                              })
                              .then(products => {
                                // Debug: Log the products data to see if quantity is included
                                console.log('Products data:', products);
                                // Clear and reset the product select
                                productSelect.innerHTML = '<option value="" selected disabled>Select Product</option>';
                                productSelect.disabled = false;

                                if (products.length === 0) {
                                  // No products found for this category
                                  const option = document.createElement('option');
                                  option.value = "";
                                  option.textContent = 'No products available';
                                  option.disabled = true;
                                  productSelect.appendChild(option);
                                  return;
                                }

                                // Add products to select
                                products.forEach(product => {
                                  const option = document.createElement('option');
                                  option.value = product._id;

                                  // Show quantity in the option text
                                  const quantity = product.quantity || 0;
                                  const lowStock = quantity <= 5;

                                  option.textContent = `${product.name} - ₹${product.price.toFixed(2)} (${quantity} in stock${lowStock ? ' - LOW STOCK' : ''})`;
                                  option.dataset.price = product.price;
                                  option.dataset.quantity = quantity;

                                  // Disable option if out of stock
                                  if (quantity <= 0) {
                                    option.disabled = true;
                                    option.textContent = `${product.name} - OUT OF STOCK`;
                                  }

                                  productSelect.appendChild(option);

                                  // We'll use the event listeners below instead of attributes
                                });

                                // If there's only one product, select it automatically
                                if (products.length === 1) {
                                  console.log('Only one product found, auto-selecting it');
                                  const option = productSelect.querySelector(`option[value="${products[0]._id}"]`);
                                  if (option) {
                                    option.selected = true;
                                    console.log('Auto-selected product:', products[0].name);

                                    // Force update the amount calculation with a slight delay
                                    setTimeout(() => {
                                      console.log('Delayed update for single product');
                                      const price = parseFloat(products[0].price);
                                      const quantity = parseInt(quantityInput.value);

                                      if (!isNaN(price) && !isNaN(quantity)) {
                                        const amount = price * quantity;
                                        amountInput.value = '₹' + amount.toFixed(2);
                                        console.log(`Set amount to: ₹${amount.toFixed(2)}`);

                                        // Update total amount
                                        updateTotalAmount();

                                        // Also directly update the total amount display
                                        const totalAmountElement = document.getElementById('totalAmount');
                                        if (totalAmountElement) {
                                          totalAmountElement.textContent = '₹' + amount.toFixed(2);
                                          console.log(`Directly set total amount to: ₹${amount.toFixed(2)}`);
                                        }

                                        // Update paid amount input
                                        const paidAmountInput = document.getElementById('paidAmount');
                                        if (paidAmountInput) {
                                          paidAmountInput.setAttribute('max', amount.toFixed(2));
                                          paidAmountInput.value = amount.toFixed(2);
                                        }

                                        // Force a direct update of the total amount
                                        document.getElementById('totalAmount').textContent = '₹' + amount.toFixed(2);
                                      }
                                    }, 100);

                                    // Also try an immediate update
                                    const price = parseFloat(products[0].price);
                                    const quantity = parseInt(quantityInput.value || 1);
                                    if (!isNaN(price) && !isNaN(quantity)) {
                                      const amount = price * quantity;
                                      document.getElementById('totalAmount').textContent = '₹' + amount.toFixed(2);
                                      console.log(`IMMEDIATE: Set total amount to: ₹${amount.toFixed(2)}`);
                                    }
                                  }
                                }

                                // Add event listener to update amount when product changes
                                productSelect.addEventListener('change', function() {
                                  updateAmountForProductSelect(this);
                                });

                                // Add event listener to update amount when quantity changes
                                quantityInput.addEventListener('input', function() {
                                  updateAmountForRow(this);
                                });

                                // Also add change event listener for quantity
                                quantityInput.addEventListener('change', function() {
                                  updateAmountForRow(this);
                                });

                                // Add blur event to ensure calculation happens
                                quantityInput.addEventListener('blur', function() {
                                  updateAmountForRow(this);
                                });
                              })
                              .catch(error => {
                                console.error('Fetch products error:', error);

                                // Try one more time with a direct fetch to the original endpoint
                                console.log('Trying direct fetch as last resort...');
                                fetch(`/api/products/category/${category}`)
                                  .then(response => response.json())
                                  .then(products => {
                                    if (products && products.length > 0) {
                                      console.log('Direct fetch succeeded:', products);

                                      // Process products as normal
                                      productSelect.innerHTML = '<option value="" selected disabled>Select Product</option>';
                                      productSelect.disabled = false;

                                      // Add products to select
                                      products.forEach(product => {
                                        const option = document.createElement('option');
                                        option.value = product._id;

                                        // Show quantity in the option text
                                        const quantity = product.quantity || 0;
                                        const lowStock = quantity <= 5;

                                        option.textContent = `${product.name} - ₹${product.price.toFixed(2)} (${quantity} in stock${lowStock ? ' - LOW STOCK' : ''})`;
                                        option.dataset.price = product.price;
                                        option.dataset.quantity = quantity;

                                        productSelect.appendChild(option);
                                      });

                                      // If there's only one product, select it automatically
                                      if (products.length === 1) {
                                        const option = productSelect.querySelector(`option[value="${products[0]._id}"]`);
                                        if (option) {
                                          option.selected = true;

                                          // Force update the amount calculation
                                          setTimeout(() => {
                                            const price = parseFloat(products[0].price);
                                            const quantity = parseInt(quantityInput.value);

                                            if (!isNaN(price) && !isNaN(quantity)) {
                                              const amount = price * quantity;
                                              amountInput.value = '₹' + amount.toFixed(2);
                                              calculateTotalAmount();

                                              // Also directly update the total amount display
                                              const totalAmountElement = document.getElementById('totalAmount');
                                              if (totalAmountElement) {
                                                totalAmountElement.textContent = '₹' + amount.toFixed(2);
                                                console.log(`Directly set total amount to: ₹${amount.toFixed(2)}`);
                                              }

                                              // Update paid amount input
                                              const paidAmountInput = document.getElementById('paidAmount');
                                              if (paidAmountInput) {
                                                paidAmountInput.setAttribute('max', amount.toFixed(2));
                                                paidAmountInput.value = amount.toFixed(2);
                                              }

                                              // Force a direct update of the total amount
                                              document.getElementById('totalAmount').textContent = '₹' + amount.toFixed(2);
                                            }
                                          }, 100);

                                          // Also try an immediate update
                                          const price = parseFloat(products[0].price);
                                          const quantity = parseInt(quantityInput.value || 1);
                                          if (!isNaN(price) && !isNaN(quantity)) {
                                            const amount = price * quantity;
                                            document.getElementById('totalAmount').textContent = '₹' + amount.toFixed(2);
                                            console.log(`IMMEDIATE: Set total amount to: ₹${amount.toFixed(2)}`);
                                          }
                                        }
                                      }

                                      // Add event listeners
                                      productSelect.addEventListener('change', function() {
                                        updateAmountForProductSelect(this);
                                      });
                                    } else {
                                      throw new Error('No products found');
                                    }
                                  })
                                  .catch(finalError => {
                                    console.error('Final fetch attempt failed:', finalError);
                                    console.log('Setting product options to empty state due to error');
                                    // Add a default option that indicates the error
                                    productSelect.innerHTML = '<option value="" selected disabled>Failed to load products</option>';
                                    productSelect.disabled = true;
                                  });
                              });
                          });

                          // Add event listener to remove button
                          const removeBtn = productRow.querySelector('.remove-product-btn');
                          removeBtn.addEventListener('click', function() {
                            productRow.remove();
                            // Recalculate total amount after removing a product
                            calculateTotalAmount();
                          });
                        };

                        // Add event listener to the Add Product button
                        addBtn.addEventListener('click', function() {
                          console.log('Add Product button clicked');
                          addProductRow();
                        });

                        // Check if there are any products in the database
                        console.log('Checking for products in the database...');

                        // Try multiple endpoints to ensure we get a response
                        const checkProducts = () => {
                          return fetch('/api/bill-products/category/Board', {
                            method: 'GET',
                            headers: {
                              'Accept': 'application/json',
                              'Content-Type': 'application/json'
                            },
                            credentials: 'same-origin'
                          })
                          .then(response => {
                            console.log('Initial product check response status:', response.status);
                            if (!response.ok) {
                              // Try the original endpoint
                              return fetch('/api/products/category/Board');
                            }
                            return response;
                          })
                          .then(response => {
                            if (!response.ok) {
                              throw new Error(`Server error: ${response.status}`);
                            }
                            return response.json();
                          });
                        };

                        checkProducts()
                          .then(products => {
                            if (products.length === 0) {
                              // No products found, show a warning
                              const warningDiv = document.createElement('div');
                              warningDiv.className = 'alert alert-warning';
                              warningDiv.innerHTML = '<strong>No products found!</strong> Please add products in the <a href="/products/add">Products section</a> before creating a bill.';
                              productContainer.appendChild(warningDiv);
                            }

                            // Add first product row if container is empty
                            if (productContainer.querySelector('.product-row') === null) {
                              addProductRow();

                              // Force calculation of total amount after adding the first row
                              setTimeout(() => {
                                const rows = document.querySelectorAll('.product-row');
                                if (rows.length > 0) {
                                  const row = rows[0];
                                  const productSelect = row.querySelector('.product-select');

                                  if (productSelect && productSelect.selectedIndex > 0) {
                                    const selectedOption = productSelect.options[productSelect.selectedIndex];
                                    const price = parseFloat(selectedOption.dataset.price);
                                    const quantityInput = row.querySelector('.quantity-input');
                                    const quantity = parseInt(quantityInput.value || 1);
                                    const amountInput = row.querySelector('.product-amount');

                                    if (!isNaN(price) && !isNaN(quantity)) {
                                      const amount = price * quantity;
                                      amountInput.value = '₹' + amount.toFixed(2);

                                      // Update total amount display
                                      const totalAmountElement = document.getElementById('totalAmount');
                                      if (totalAmountElement) {
                                        totalAmountElement.textContent = '₹' + amount.toFixed(2);
                                        console.log(`Initial row: Set total amount to: ₹${amount.toFixed(2)}`);
                                      }

                                      // Update paid amount input
                                      const paidAmountInput = document.getElementById('paidAmount');
                                      if (paidAmountInput) {
                                        paidAmountInput.setAttribute('max', amount.toFixed(2));
                                        paidAmountInput.value = amount.toFixed(2);
                                      }
                                    }
                                  }
                                }
                              }, 1000);
                            }
                          })
                          .catch(error => {
                            console.error('Error checking products:', error);
                            // Add first product row anyway
                            if (productContainer.querySelector('.product-row') === null) {
                              addProductRow();
                            }
                          });
                      });
                    </script>
                  </div>
                </div>

                <div class="row mb-4">
                  <div class="col-md-12">
                    <h5>Payment Information</h5>
                    <hr>
                  </div>

                  <input type="hidden" id="paymentType" name="paymentType" value="Cash">
                  <div class="col-md-6 mb-3">
                    <label for="paidAmount" class="form-label">Paid Amount (₹)</label>
                    <input type="number" class="form-control" id="paidAmount" name="paidAmount" step="0.01" min="0" max="" required oninput="validatePaidAmount(this)">
                    <div class="invalid-feedback" id="paidAmountFeedback">Paid amount cannot exceed the total amount.</div>
                  </div>

                  <div class="col-md-6 mb-3">
                    <div class="alert alert-info">
                      <small>Enter the amount paid by the customer. If the customer pays the full amount, the remaining amount will be 0.</small>
                    </div>
                  </div>
                </div>

                <!-- Total Amount Display -->
                <div class="row mb-4">
                  <div class="col-md-12">
                    <div class="card bg-light">
                      <div class="card-body">
                        <div class="row align-items-center">
                          <div class="col-md-6">
                            <h5 class="mb-0">Total Amount:</h5>
                          </div>
                          <div class="col-md-6 text-end">
                            <h3 class="mb-0" id="totalAmount">₹0.00</h3>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="row">
                  <div class="col-md-12">
                    <div class="d-grid gap-2">
                      <button type="submit" class="btn btn-primary">Create Bill</button>
                    </div>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</div>

<script>
  // Function to validate paid amount doesn't exceed total
  function validatePaidAmount(input) {
    const totalAmountElement = document.getElementById('totalAmount');
    if (!totalAmountElement) return;

    const totalText = totalAmountElement.textContent;
    const totalValue = parseFloat(totalText.replace('₹', ''));
    const paidValue = parseFloat(input.value);

    console.log('Validating paid amount:', paidValue, 'against total:', totalValue);

    if (isNaN(totalValue) || isNaN(paidValue)) {
      return;
    }

    // Set the max attribute to the current total
    input.setAttribute('max', totalValue.toFixed(2));

    // Check if paid amount exceeds total
    if (paidValue > totalValue) {
      input.value = totalValue.toFixed(2); // Reset to max allowed value
      input.classList.add('is-invalid');

      // Show feedback message
      const feedbackId = input.id === 'paidAmount' ? 'paidAmountFeedback' : 'customPaidAmountFeedback';
      const feedbackElement = document.getElementById(feedbackId);
      if (feedbackElement) {
        feedbackElement.style.display = 'block';
      }
    } else {
      input.classList.remove('is-invalid');

      // Hide feedback message
      const feedbackId = input.id === 'paidAmount' ? 'paidAmountFeedback' : 'customPaidAmountFeedback';
      const feedbackElement = document.getElementById(feedbackId);
      if (feedbackElement) {
        feedbackElement.style.display = 'none';
      }
    }
  }

  // Direct function to update amount for a row when product select changes
  function updateAmountForProductSelect(productSelect) {
    const row = productSelect.closest('.product-row');
    if (!row) return;

    const quantityInput = row.querySelector('.quantity-input');
    const amountInput = row.querySelector('.product-amount');

    if (productSelect.selectedIndex > 0 && quantityInput && quantityInput.value) {
      const selectedOption = productSelect.options[productSelect.selectedIndex];
      const price = parseFloat(selectedOption.dataset.price);
      const quantity = parseInt(quantityInput.value);

      if (!isNaN(price) && !isNaN(quantity)) {
        const amount = price * quantity;
        amountInput.value = '₹' + amount.toFixed(2);

        // Update total
        console.log('Updating total amount after product selection');
        updateTotalAmount();

        // Also directly update the total amount display
        const totalAmountElement = document.getElementById('totalAmount');
        if (totalAmountElement) {
          // Calculate total from all rows
          let total = 0;
          document.querySelectorAll('.product-row').forEach(r => {
            const ps = r.querySelector('.product-select');
            const qi = r.querySelector('.quantity-input');

            if (ps && ps.selectedIndex > 0 && qi && qi.value) {
              const so = ps.options[ps.selectedIndex];
              const p = parseFloat(so.dataset.price);
              const q = parseInt(qi.value);

              if (!isNaN(p) && !isNaN(q)) {
                total += p * q;
              }
            }
          });

          totalAmountElement.textContent = '₹' + total.toFixed(2);
          console.log(`Direct update: Set total amount to: ₹${total.toFixed(2)}`);

          // Update paid amount input
          const paidAmountInput = document.getElementById('paidAmount');
          if (paidAmountInput) {
            paidAmountInput.setAttribute('max', total.toFixed(2));
            paidAmountInput.value = total.toFixed(2);
          }
        }
      }
    }
  }

  // Direct function to update amount for a row when quantity changes
  function updateAmountForRow(quantityInput) {
    const row = quantityInput.closest('.product-row');
    if (!row) return;

    const productSelect = row.querySelector('.product-select');
    const amountInput = row.querySelector('.product-amount');

    if (productSelect && productSelect.selectedIndex > 0 && quantityInput.value) {
      const selectedOption = productSelect.options[productSelect.selectedIndex];
      const price = parseFloat(selectedOption.dataset.price);
      const quantity = parseInt(quantityInput.value);

      if (!isNaN(price) && !isNaN(quantity)) {
        const amount = price * quantity;
        amountInput.value = '₹' + amount.toFixed(2);

        // Update total
        console.log('Updating total amount after quantity change');
        updateTotalAmount();

        // Also directly update the total amount display
        const totalAmountElement = document.getElementById('totalAmount');
        if (totalAmountElement) {
          // Calculate total from all rows
          let total = 0;
          document.querySelectorAll('.product-row').forEach(r => {
            const ps = r.querySelector('.product-select');
            const qi = r.querySelector('.quantity-input');

            if (ps && ps.selectedIndex > 0 && qi && qi.value) {
              const so = ps.options[ps.selectedIndex];
              const p = parseFloat(so.dataset.price);
              const q = parseInt(qi.value);

              if (!isNaN(p) && !isNaN(q)) {
                total += p * q;
              }
            }
          });

          totalAmountElement.textContent = '₹' + total.toFixed(2);
          console.log(`Direct update: Set total amount to: ₹${total.toFixed(2)}`);

          // Update paid amount input
          const paidAmountInput = document.getElementById('paidAmount');
          if (paidAmountInput) {
            paidAmountInput.setAttribute('max', total.toFixed(2));
            paidAmountInput.value = total.toFixed(2);
          }
        }
      }
    }
  }

  // Function to update total amount
  function updateTotalAmount() {
    console.log('Calculating total amount...');
    let total = 0;
    const rows = document.querySelectorAll('.product-row');
    console.log(`Found ${rows.length} product rows`);

    rows.forEach((row, index) => {
      const productSelect = row.querySelector('.product-select');
      const quantityInput = row.querySelector('.quantity-input');
      const amountInput = row.querySelector('.product-amount');

      console.log(`Row ${index + 1}:`, {
        hasProductSelect: !!productSelect,
        selectedIndex: productSelect ? productSelect.selectedIndex : 'N/A',
        hasQuantityInput: !!quantityInput,
        quantityValue: quantityInput ? quantityInput.value : 'N/A',
        amountValue: amountInput ? amountInput.value : 'N/A'
      });

      if (productSelect && productSelect.selectedIndex > 0 && quantityInput && quantityInput.value) {
        const selectedOption = productSelect.options[productSelect.selectedIndex];
        const price = parseFloat(selectedOption.dataset.price);
        const quantity = parseInt(quantityInput.value);

        console.log(`Row ${index + 1} calculation:`, { price, quantity });

        if (!isNaN(price) && !isNaN(quantity)) {
          const rowTotal = price * quantity;
          total += rowTotal;
          console.log(`Row ${index + 1} total: ${rowTotal}, Running total: ${total}`);
        }
      }
    });

    const totalAmountElement = document.getElementById('totalAmount');
    if (totalAmountElement) {
      totalAmountElement.textContent = '₹' + total.toFixed(2);
      console.log(`Updated total amount display to: ${total.toFixed(2)}`);

      // Also update the max value of the paid amount input
      const paidAmountInput = document.getElementById('paidAmount');
      if (paidAmountInput) {
        paidAmountInput.setAttribute('max', total.toFixed(2));
      }
    }
  }

  // Function to validate the bill form before submission
  function validateBillForm() {
    // Check customer information
    const customerName = document.getElementById('customerName').value.trim();
    const customerPhone = document.getElementById('customerPhone').value.trim();
    const customerPlace = document.getElementById('customerPlace').value.trim();

    if (!customerName) {
      alert('Please enter customer name');
      document.getElementById('customerName').focus();
      return false;
    }

    if (!customerPhone) {
      alert('Please enter customer phone number');
      document.getElementById('customerPhone').focus();
      return false;
    }

    if (!customerPlace) {
      alert('Please enter customer place');
      document.getElementById('customerPlace').focus();
      return false;
    }

    // Check work and picked by
    const work = document.getElementById('work').value.trim();
    const pickedBy = document.getElementById('pickedBy').value.trim();

    if (!work) {
      alert('Please enter work details');
      document.getElementById('work').focus();
      return false;
    }

    if (!pickedBy) {
      alert('Please enter who picked the order');
      document.getElementById('pickedBy').focus();
      return false;
    }

    // Check if at least one product is selected
    const productRows = document.querySelectorAll('.product-row');
    let hasValidProduct = false;

    for (const row of productRows) {
      const productSelect = row.querySelector('.product-select');
      if (productSelect && productSelect.value) {
        hasValidProduct = true;
        break;
      }
    }

    if (!hasValidProduct) {
      alert('Please select at least one product');
      return false;
    }

    // Check paid amount
    const paidAmount = document.getElementById('paidAmount').value;
    if (!paidAmount && paidAmount !== '0') {
      alert('Please enter paid amount');
      document.getElementById('paidAmount').focus();
      return false;
    }

    // All validations passed
    return true;
  }

  document.addEventListener('DOMContentLoaded', function() {
    const productContainer = document.getElementById('productContainer');
    const addProductBtn = document.getElementById('addProductBtn');
    const paymentType = document.getElementById('paymentType');
    const creditTypeContainer = document.getElementById('creditTypeContainer');
    const creditType = document.getElementById('creditType');
    const customerNameInput = document.getElementById('customerName');
    const customerPhoneInput = document.getElementById('customerPhone');
    const customerPlaceInput = document.getElementById('customerPlace');

    // Categories
    const categories = ['Board', 'Chanel', 'Hardware', 'Bori'];

    // Function to add product row
    const addProductRow = () => {
      const productRow = document.createElement('div');
      productRow.className = 'row product-row mb-3';

      productRow.innerHTML = `
        <div class="col-md-3 mb-2">
          <label class="form-label">Category</label>
          <select class="form-select category-select" required>
            <option value="" selected disabled>Select Category</option>
            ${categories.map(category => `<option value="${category}">${category}</option>`).join('')}
          </select>
        </div>

        <div class="col-md-3 mb-2">
          <label class="form-label">Product</label>
          <select class="form-select product-select" name="productIds" required>
            <option value="" selected disabled>Select Product</option>
          </select>
        </div>

        <div class="col-md-2 mb-2">
          <label class="form-label">Quantity</label>
          <input type="number" class="form-control quantity-input" name="quantities" min="1" value="1" required onchange="updateAmountForRow(this)" oninput="updateAmountForRow(this)">
        </div>

        <div class="col-md-2 mb-2">
          <label class="form-label">Amount (₹)</label>
          <input type="text" class="form-control product-amount" readonly>
        </div>

        <div class="col-md-2 mb-2 d-flex align-items-end">
          <button type="button" class="btn btn-outline-danger remove-product-btn">
            <i class="fas fa-trash"></i>
          </button>
        </div>
      `;

      productContainer.appendChild(productRow);

      // Add event listener to category select
      const categorySelect = productRow.querySelector('.category-select');
      const productSelect = productRow.querySelector('.product-select');
      const quantityInput = productRow.querySelector('.quantity-input');
      const amountInput = productRow.querySelector('.product-amount');

      categorySelect.addEventListener('change', function() {
        const category = this.value;

        if (!category) {
          productSelect.innerHTML = '<option value="" selected disabled>Select Product</option>';
          productSelect.disabled = true;
          return;
        }

        // Fetch products for selected category
        console.log(`Fetching products for category: ${category}`);

        // Try the new API endpoint first
        fetch(`/api/bill-products/category/${category}`, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          credentials: 'same-origin'
        })
        .then(response => {
          console.log('Fetch response status:', response.status);
          if (!response.ok) {
            // Try the original endpoint as fallback
            console.log('Trying original API endpoint as fallback...');
            return fetch(`/api/products/category/${category}`);
          }
          return response;
        })
        .then(response => {
          if (!response.ok) {
            throw new Error(`Server error: ${response.status}`);
          }
          return response.json();
        })
        .then(products => {
          // Debug: Log the products data to see if quantity is included
          console.log('Products data:', products);
          // Clear and reset the product select
          productSelect.innerHTML = '<option value="" selected disabled>Select Product</option>';
          productSelect.disabled = false;

          if (products.length === 0) {
            // No products found for this category
            const option = document.createElement('option');
            option.value = "";
            option.textContent = 'No products available';
            option.disabled = true;
            productSelect.appendChild(option);
            return;
          }

            // Add products to select
            products.forEach(product => {
              const option = document.createElement('option');
              option.value = product._id;

              // Show quantity in the option text
              const quantity = product.quantity || 0;
              const lowStock = quantity <= 5;

              option.textContent = `${product.name} - ₹${product.price.toFixed(2)} (${quantity} in stock${lowStock ? ' - LOW STOCK' : ''})`;
              option.dataset.price = product.price;
              option.dataset.quantity = quantity;

              // Disable option if out of stock
              if (quantity <= 0) {
                option.disabled = true;
                option.textContent = `${product.name} - OUT OF STOCK`;
              }

              productSelect.appendChild(option);

              // Add onchange attribute to the select
              productSelect.setAttribute('onchange', 'updateAmountForProductSelect(this)');
            });

            // If there's only one product, select it automatically
            if (products.length === 1) {
              console.log('Only one product found, auto-selecting it');
              const option = productSelect.querySelector(`option[value="${products[0]._id}"]`);
              if (option) {
                option.selected = true;
                console.log('Auto-selected product:', products[0].name);

                // Force update the amount calculation with a slight delay
                setTimeout(() => {
                  console.log('Delayed update for single product');
                  const price = parseFloat(products[0].price);
                  const quantity = parseInt(quantityInput.value || 1);

                  if (!isNaN(price) && !isNaN(quantity)) {
                    const amount = price * quantity;
                    amountInput.value = '₹' + amount.toFixed(2);
                    console.log(`Set amount to: ₹${amount.toFixed(2)}`);

                    // Update total amount
                    calculateTotalAmount();

                    // Also directly update the total amount display
                    const totalAmountElement = document.getElementById('totalAmount');
                    if (totalAmountElement) {
                      totalAmountElement.textContent = '₹' + amount.toFixed(2);
                      console.log(`Auto-select: Set total amount to: ₹${amount.toFixed(2)}`);
                    }

                    // Update paid amount input
                    const paidAmountInput = document.getElementById('paidAmount');
                    if (paidAmountInput) {
                      paidAmountInput.setAttribute('max', amount.toFixed(2));
                      paidAmountInput.value = amount.toFixed(2);
                    }
                  }
                }, 100);
              }
            }

            // Add event listener to update amount when product changes
            productSelect.addEventListener('change', function() {
              console.log('Product selection changed');
              // Use the direct function to update amount
              const row = this.closest('.product-row');
              if (row) {
                const quantityInput = row.querySelector('.quantity-input');
                const amountInput = row.querySelector('.product-amount');

                if (this.selectedIndex > 0 && quantityInput) {
                  const selectedOption = this.options[this.selectedIndex];
                  const price = parseFloat(selectedOption.dataset.price);
                  const quantity = parseInt(quantityInput.value || 1);

                  if (!isNaN(price) && !isNaN(quantity)) {
                    const amount = price * quantity;
                    amountInput.value = '₹' + amount.toFixed(2);
                    console.log(`Set amount to: ₹${amount.toFixed(2)}`);

                    // Update total amount
                    calculateTotalAmount();

                    // Also directly update the total amount display
                    const totalAmountElement = document.getElementById('totalAmount');
                    if (totalAmountElement) {
                      // Calculate total from all rows
                      let total = 0;
                      document.querySelectorAll('.product-row').forEach(r => {
                        const ps = r.querySelector('.product-select');
                        const qi = r.querySelector('.quantity-input');

                        if (ps && ps.selectedIndex > 0) {
                          const so = ps.options[ps.selectedIndex];
                          const p = parseFloat(so.dataset.price);
                          const q = parseInt(qi.value || 1);

                          if (!isNaN(p) && !isNaN(q)) {
                            total += p * q;
                          }
                        }
                      });

                      totalAmountElement.textContent = '₹' + total.toFixed(2);
                      console.log(`Direct update: Set total amount to: ₹${total.toFixed(2)}`);

                      // Update paid amount input
                      const paidAmountInput = document.getElementById('paidAmount');
                      if (paidAmountInput) {
                        paidAmountInput.setAttribute('max', total.toFixed(2));
                        paidAmountInput.value = total.toFixed(2);
                      }
                    }
                  }
                }
              }
            });

            // Add event listener to update amount when quantity changes
            quantityInput.addEventListener('input', function() {
              console.log('Quantity input changed');
              // Use the direct function to update amount
              const row = this.closest('.product-row');
              if (row) {
                const productSelect = row.querySelector('.product-select');
                const amountInput = row.querySelector('.product-amount');

                if (productSelect && productSelect.selectedIndex > 0) {
                  const selectedOption = productSelect.options[productSelect.selectedIndex];
                  const price = parseFloat(selectedOption.dataset.price);
                  const quantity = parseInt(this.value || 1);

                  if (!isNaN(price) && !isNaN(quantity)) {
                    const amount = price * quantity;
                    amountInput.value = '₹' + amount.toFixed(2);
                    console.log(`Set amount to: ₹${amount.toFixed(2)}`);

                    // Update total amount
                    calculateTotalAmount();

                    // Also directly update the total amount display
                    const totalAmountElement = document.getElementById('totalAmount');
                    if (totalAmountElement) {
                      // Calculate total from all rows
                      let total = 0;
                      document.querySelectorAll('.product-row').forEach(r => {
                        const ps = r.querySelector('.product-select');
                        const qi = r.querySelector('.quantity-input');

                        if (ps && ps.selectedIndex > 0) {
                          const so = ps.options[ps.selectedIndex];
                          const p = parseFloat(so.dataset.price);
                          const q = parseInt(qi.value || 1);

                          if (!isNaN(p) && !isNaN(q)) {
                            total += p * q;
                          }
                        }
                      });

                      totalAmountElement.textContent = '₹' + total.toFixed(2);
                      console.log(`Direct update: Set total amount to: ₹${total.toFixed(2)}`);

                      // Update paid amount input
                      const paidAmountInput = document.getElementById('paidAmount');
                      if (paidAmountInput) {
                        paidAmountInput.setAttribute('max', total.toFixed(2));
                        paidAmountInput.value = total.toFixed(2);
                      }
                    }
                  }
                }
              }
            });

            // Also add change event listener for quantity
            quantityInput.addEventListener('change', function() {
              console.log('Quantity changed');
              // Use the direct function to update amount
              const row = this.closest('.product-row');
              if (row) {
                const productSelect = row.querySelector('.product-select');
                const amountInput = row.querySelector('.product-amount');

                if (productSelect && productSelect.selectedIndex > 0) {
                  const selectedOption = productSelect.options[productSelect.selectedIndex];
                  const price = parseFloat(selectedOption.dataset.price);
                  const quantity = parseInt(this.value || 1);

                  if (!isNaN(price) && !isNaN(quantity)) {
                    const amount = price * quantity;
                    amountInput.value = '₹' + amount.toFixed(2);
                    console.log(`Set amount to: ₹${amount.toFixed(2)}`);

                    // Update total amount
                    calculateTotalAmount();

                    // Also directly update the total amount display
                    const totalAmountElement = document.getElementById('totalAmount');
                    if (totalAmountElement) {
                      // Calculate total from all rows
                      let total = 0;
                      document.querySelectorAll('.product-row').forEach(r => {
                        const ps = r.querySelector('.product-select');
                        const qi = r.querySelector('.quantity-input');

                        if (ps && ps.selectedIndex > 0) {
                          const so = ps.options[ps.selectedIndex];
                          const p = parseFloat(so.dataset.price);
                          const q = parseInt(qi.value || 1);

                          if (!isNaN(p) && !isNaN(q)) {
                            total += p * q;
                          }
                        }
                      });

                      totalAmountElement.textContent = '₹' + total.toFixed(2);
                      console.log(`Direct update: Set total amount to: ₹${total.toFixed(2)}`);

                      // Update paid amount input
                      const paidAmountInput = document.getElementById('paidAmount');
                      if (paidAmountInput) {
                        paidAmountInput.setAttribute('max', total.toFixed(2));
                        paidAmountInput.value = total.toFixed(2);
                      }
                    }
                  }
                }
              }
            });
          })
          .catch(error => {
            console.error('Fetch products error:', error);

            // Try one more time with a direct fetch to the original endpoint
            console.log('Trying direct fetch as last resort...');
            fetch(`/api/products/category/${category}`)
              .then(response => response.json())
              .then(products => {
                if (products && products.length > 0) {
                  console.log('Direct fetch succeeded:', products);

                  // Process products as normal
                  productSelect.innerHTML = '<option value="" selected disabled>Select Product</option>';
                  productSelect.disabled = false;

                  // Add products to select
                  products.forEach(product => {
                    const option = document.createElement('option');
                    option.value = product._id;

                    // Show quantity in the option text
                    const quantity = product.quantity || 0;
                    const lowStock = quantity <= 5;

                    option.textContent = `${product.name} - ₹${product.price.toFixed(2)} (${quantity} in stock${lowStock ? ' - LOW STOCK' : ''})`;
                    option.dataset.price = product.price;
                    option.dataset.quantity = quantity;

                    productSelect.appendChild(option);
                  });

                  // If there's only one product, select it automatically
                  if (products.length === 1) {
                    const option = productSelect.querySelector(`option[value="${products[0]._id}"]`);
                    if (option) {
                      option.selected = true;

                      // Force update the amount calculation
                      setTimeout(() => {
                        const price = parseFloat(products[0].price);
                        const quantity = parseInt(quantityInput.value || 1);

                        if (!isNaN(price) && !isNaN(quantity)) {
                          const amount = price * quantity;
                          amountInput.value = '₹' + amount.toFixed(2);

                          // Update total amount
                          calculateTotalAmount();

                          // Also directly update the total amount display
                          const totalAmountElement = document.getElementById('totalAmount');
                          if (totalAmountElement) {
                            totalAmountElement.textContent = '₹' + amount.toFixed(2);
                            console.log(`Auto-select: Set total amount to: ₹${amount.toFixed(2)}`);
                          }

                          // Update paid amount input
                          const paidAmountInput = document.getElementById('paidAmount');
                          if (paidAmountInput) {
                            paidAmountInput.setAttribute('max', amount.toFixed(2));
                            paidAmountInput.value = amount.toFixed(2);
                          }
                        }
                      }, 100);
                    }
                  }
                } else {
                  throw new Error('No products found');
                }
              })
              .catch(finalError => {
                console.error('Final fetch attempt failed:', finalError);
                console.log('Setting product options to empty state due to error');
                // Add a default option that indicates the error
                productSelect.innerHTML = '<option value="" selected disabled>Failed to load products</option>';
                productSelect.disabled = true;
              });
          });
      });

      // Add event listener to remove button
      const removeBtn = productRow.querySelector('.remove-product-btn');
      removeBtn.addEventListener('click', function() {
        productRow.remove();

        // Update field names after removing a row
        updateProductFieldNames();

        // Recalculate total amount after removing a product
        calculateTotalAmount();
      });
    };

    // Add first product row
    addProductRow();

    // Initialize field names
    updateProductFieldNames();

    // DIRECT FIX: Add immediate event listeners to all product selects
    setTimeout(() => {
      document.querySelectorAll('.product-select').forEach(select => {
        // Add a direct event listener
        select.addEventListener('change', function() {
          console.log('DIRECT FIX: Product select changed');

          // Calculate total immediately
          const productRows = document.querySelectorAll('.product-row');
          let total = 0;

          productRows.forEach(row => {
            const ps = row.querySelector('.product-select');
            const qi = row.querySelector('.quantity-input');
            const ai = row.querySelector('.product-amount');

            if (ps && ps.selectedIndex > 0) {
              const so = ps.options[ps.selectedIndex];
              const p = parseFloat(so.dataset.price || so.getAttribute('data-price'));
              const q = parseInt(qi.value || 1);

              if (!isNaN(p) && !isNaN(q)) {
                const rowAmount = p * q;
                ai.value = '₹' + rowAmount.toFixed(2);
                total += rowAmount;
              }
            }
          });

          // Update total amount display
          const totalAmountElement = document.getElementById('totalAmount');
          if (totalAmountElement) {
            totalAmountElement.textContent = '₹' + total.toFixed(2);
            console.log('DIRECT FIX: Total amount updated to:', total.toFixed(2));
          }

          // Update paid amount input
          const paidAmountInput = document.getElementById('paidAmount');
          if (paidAmountInput) {
            paidAmountInput.setAttribute('max', total.toFixed(2));
            paidAmountInput.value = total.toFixed(2);
          }
        });
      });
    }, 500);

    // Add global event listener for quantity inputs to ensure they update
    document.addEventListener('click', function(e) {
      if (e.target && e.target.classList.contains('quantity-input')) {
        const row = e.target.closest('.product-row');
        if (row) {
          const productSelect = row.querySelector('.product-select');
          const amountInput = row.querySelector('.product-amount');
          updateProductAmount(productSelect, e.target, amountInput);
        }
      }
    });

    // Add product row on button click
    addProductBtn.addEventListener('click', function() {
      addProductRow();

      // Update name attributes to ensure they're unique
      updateProductFieldNames();

      // Recalculate total amount after adding a new product row
      setTimeout(calculateTotalAmount, 100);
    });

    // Function to update product field names
    const updateProductFieldNames = () => {
      const productRows = document.querySelectorAll('.product-row');

      productRows.forEach((row, index) => {
        const productSelect = row.querySelector('.product-select');
        const quantityInput = row.querySelector('.quantity-input');

        // Update names to include index
        if (productSelect) {
          productSelect.name = `productIds[]`;
        }

        if (quantityInput) {
          quantityInput.name = `quantities[]`;
        }
      });
    };

    // Get reference to the paid amount input
    const paidAmountInput = document.getElementById('paidAmount');

    // Set the paid amount to the total amount when the total changes
    function updatePaidAmount() {
      const totalAmountElement = document.getElementById('totalAmount');
      const totalText = totalAmountElement.textContent;
      const totalValue = parseFloat(totalText.replace('₹', ''));

      if (!isNaN(totalValue) && paidAmountInput) {
        paidAmountInput.value = totalValue.toFixed(2);
        paidAmountInput.setAttribute('max', totalValue.toFixed(2));
      }
    }

    // Update paid amount when the page loads
    setTimeout(updatePaidAmount, 500);

    // Get references to customer search elements
    const customerSearchInput = document.getElementById('customerSearch');
    const searchCustomerBtn = document.getElementById('searchCustomerBtn');
    const customerSearchResults = document.getElementById('customerSearchResults');

    // Function to fill customer details
    const fillCustomerDetails = (customer) => {
      customerNameInput.value = customer.name;
      customerPhoneInput.value = customer.phone;
      customerPlaceInput.value = customer.place;

      // Hide search results
      customerSearchResults.style.display = 'none';
    };

    // Function to perform customer search
    const searchCustomers = () => {
      const query = customerSearchInput.value.trim();

      if (query.length < 2) {
        customerSearchResults.style.display = 'none';
        return;
      }

      // Show loading indicator
      customerSearchResults.innerHTML = '<div class="list-group-item">Searching...</div>';
      customerSearchResults.style.display = 'block';

      // Log the search URL for debugging
      console.log('Search URL:', `/api/customers/search?query=${encodeURIComponent(query)}`);

      fetch(`/api/customers/search?query=${encodeURIComponent(query)}`)
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        })
        .then(customers => {
          console.log('Search results:', customers);
          customerSearchResults.innerHTML = '';

          if (!customers || customers.length === 0) {
            customerSearchResults.innerHTML = '<div class="list-group-item">No customers found</div>';
          } else {
            customers.forEach(customer => {
              const item = document.createElement('a');
              item.href = '#';
              item.className = 'list-group-item list-group-item-action';
              item.innerHTML = `<strong>${customer.name}</strong> - ${customer.phone} (${customer.place})`;

              item.addEventListener('click', (e) => {
                e.preventDefault();
                fillCustomerDetails(customer);
              });

              customerSearchResults.appendChild(item);
            });
          }

          customerSearchResults.style.display = 'block';
        })
        .catch(error => {
          console.error('Customer search error:', error);
          customerSearchResults.innerHTML = `<div class="list-group-item text-danger">Error: ${error.message}</div>`;
        });
    };

    // Search on button click
    searchCustomerBtn.addEventListener('click', searchCustomers);

    // Search on Enter key press
    customerSearchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault(); // Prevent form submission
        searchCustomers();
      }
    });

    // Search as you type (with debounce)
    let searchTimeout;
    customerSearchInput.addEventListener('input', function() {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(searchCustomers, 300);
    });

    // Also keep the phone blur functionality for direct phone entry
    customerPhoneInput.addEventListener('blur', function() {
      const phone = this.value.trim();

      if (phone.length > 0) {
        console.log('Searching by phone:', phone);

        fetch(`/api/customers/search?query=${encodeURIComponent(phone)}`)
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
          })
          .then(customers => {
            console.log('Phone search results:', customers);

            if (customers && customers.length > 0) {
              const customer = customers[0];
              console.log('Found customer:', customer);
              customerNameInput.value = customer.name;
              customerPlaceInput.value = customer.place;
            }
          })
          .catch(error => {
            console.error('Customer search by phone error:', error);
          });
      }
    });

    // Function to update product amount
    const updateProductAmount = (productSelect, quantityInput, amountInput) => {
      console.log('Updating product amount');
      console.log('Product select index:', productSelect.selectedIndex);
      console.log('Quantity value:', quantityInput.value);

      // CRITICAL FIX: Always use a default quantity of 1 if empty
      if (productSelect.selectedIndex > 0) {
        const selectedOption = productSelect.options[productSelect.selectedIndex];
        const price = parseFloat(selectedOption.dataset.price);
        const quantity = parseInt(quantityInput.value || 1); // Default to 1 if empty
        const availableQuantity = parseInt(selectedOption.dataset.quantity || 0);

        console.log('Price:', price);
        console.log('Quantity:', quantity);
        console.log('Available quantity:', availableQuantity);

        // Validate quantity against available stock
        if (quantity > availableQuantity) {
          alert(`Only ${availableQuantity} units available in stock for ${selectedOption.textContent.split(' - ')[0]}`);
          quantityInput.value = availableQuantity;
          // Recalculate with the adjusted quantity
          const adjustedQuantity = parseInt(quantityInput.value);
          const amount = price * adjustedQuantity;
          amountInput.value = '₹' + amount.toFixed(2);
        } else if (!isNaN(price) && !isNaN(quantity)) {
          const amount = price * quantity;
          console.log('Calculated amount:', amount);
          amountInput.value = '₹' + amount.toFixed(2);
        } else {
          console.log('Price or quantity is NaN');
          amountInput.value = '';
        }

        // Update total amount
        calculateTotalAmount();

        // CRITICAL FIX: Force direct update of total amount
        setTimeout(() => {
          // Get all product rows
          const productRows = document.querySelectorAll('.product-row');
          let total = 0;

          productRows.forEach(row => {
            const ps = row.querySelector('.product-select');
            const qi = row.querySelector('.quantity-input');

            if (ps && ps.selectedIndex > 0) {
              const so = ps.options[ps.selectedIndex];
              const p = parseFloat(so.dataset.price);
              const q = parseInt(qi.value || 1); // Default to 1 if empty

              if (!isNaN(p) && !isNaN(q)) {
                total += p * q;
              }
            }
          });

          // Update total amount display
          const totalAmountElement = document.getElementById('totalAmount');
          if (totalAmountElement) {
            totalAmountElement.textContent = '₹' + total.toFixed(2);
            console.log(`CRITICAL FIX: Set total amount to: ₹${total.toFixed(2)}`);
          }

          // Update paid amount input
          const paidAmountInput = document.getElementById('paidAmount');
          if (paidAmountInput) {
            paidAmountInput.setAttribute('max', total.toFixed(2));
            paidAmountInput.value = total.toFixed(2);
          }
        }, 50);
      } else {
        console.log('Product not selected');
        amountInput.value = '';
        calculateTotalAmount();
      }
    };

    // Function to calculate total amount
    const calculateTotalAmount = () => {
      console.log('Calculating total amount...');
      const productRows = document.querySelectorAll('.product-row');
      let total = 0;

      productRows.forEach((row, index) => {
        const productSelect = row.querySelector('.product-select');
        const quantityInput = row.querySelector('.quantity-input');
        const amountInput = row.querySelector('.product-amount');

        if (productSelect && productSelect.selectedIndex > 0) {
          const selectedOption = productSelect.options[productSelect.selectedIndex];
          const price = parseFloat(selectedOption.dataset.price);
          const quantity = parseInt(quantityInput.value || 1); // CRITICAL FIX: Default to 1 if empty

          console.log(`Row ${index + 1} calculation:`, {
            product: selectedOption.textContent,
            price,
            quantity
          });

          if (!isNaN(price) && !isNaN(quantity)) {
            const rowTotal = price * quantity;
            total += rowTotal;
            console.log(`Row ${index + 1} total: ${rowTotal}, Running total: ${total}`);

            // Update the row amount display
            amountInput.value = '₹' + rowTotal.toFixed(2);
          }
        }
      });

      // Update total amount display
      const totalAmountElement = document.getElementById('totalAmount');
      if (totalAmountElement) {
        totalAmountElement.textContent = '₹' + total.toFixed(2);
        console.log(`Updated total amount display to: ${total.toFixed(2)}`);
      }

      // Update paid amount input
      const paidAmountInput = document.getElementById('paidAmount');

      // Update max value for paid amount input
      if (paidAmountInput) {
        paidAmountInput.setAttribute('max', total.toFixed(2));

        // Set the value to the total by default
        paidAmountInput.value = total.toFixed(2);
        console.log(`Updated paid amount input to: ${total.toFixed(2)}`);
      }

      // CRITICAL FIX: Force update the total amount display again
      setTimeout(() => {
        const totalElement = document.getElementById('totalAmount');
        if (totalElement && totalElement.textContent === '₹' + '0.00' && total > 0) {
          totalElement.textContent = '₹' + total.toFixed(2);
          console.log(`CRITICAL FIX: Forced total amount update to: ${total.toFixed(2)}`);

          // Also update paid amount
          if (paidAmountInput) {
            paidAmountInput.value = total.toFixed(2);
          }
        }
      }, 50);

      return total;
    };

    // Initialize all amounts on page load
    setTimeout(() => {
      console.log('Initializing all amounts on page load');

      // First, update all product amounts
      document.querySelectorAll('.product-row').forEach(row => {
        const productSelect = row.querySelector('.product-select');
        const quantityInput = row.querySelector('.quantity-input');
        const amountInput = row.querySelector('.product-amount');

        if (productSelect && productSelect.selectedIndex > 0 && quantityInput && quantityInput.value) {
          const selectedOption = productSelect.options[productSelect.selectedIndex];
          const price = parseFloat(selectedOption.dataset.price);
          const quantity = parseInt(quantityInput.value);

          if (!isNaN(price) && !isNaN(quantity)) {
            const amount = price * quantity;
            amountInput.value = '₹' + amount.toFixed(2);
            console.log(`Set amount to: ₹${amount.toFixed(2)}`);
          }
        }
      });

      // Then calculate the total
      calculateTotalAmount();

      // Force a direct calculation of the total amount
      const productRows = document.querySelectorAll('.product-row');
      let total = 0;

      productRows.forEach(row => {
        const productSelect = row.querySelector('.product-select');
        const quantityInput = row.querySelector('.quantity-input');

        if (productSelect && productSelect.selectedIndex > 0 && quantityInput && quantityInput.value) {
          const selectedOption = productSelect.options[productSelect.selectedIndex];
          const price = parseFloat(selectedOption.dataset.price);
          const quantity = parseInt(quantityInput.value);

          console.log('Direct calculation:', { price, quantity });

          if (!isNaN(price) && !isNaN(quantity)) {
            const rowTotal = price * quantity;
            total += rowTotal;
            console.log(`Row total: ${rowTotal}, Running total: ${total}`);
          }
        }
      });

      // Update total amount display
      const totalAmountElement = document.getElementById('totalAmount');
      if (totalAmountElement) {
        totalAmountElement.textContent = '₹' + total.toFixed(2);
        console.log(`Directly set total amount to: ₹${total.toFixed(2)}`);
      }

      // Update paid amount input
      const paidAmountInput = document.getElementById('paidAmount');
      if (paidAmountInput) {
        paidAmountInput.setAttribute('max', total.toFixed(2));
        paidAmountInput.value = total.toFixed(2);
      }
    }, 1000);

    // Form validation before submission
    document.getElementById('billForm').addEventListener('submit', function(e) {
      // DIRECT FIX: Force recalculation of total amount before submission
      const productRows = document.querySelectorAll('.product-row');
      let total = 0;

      productRows.forEach(row => {
        const productSelect = row.querySelector('.product-select');
        const quantityInput = row.querySelector('.quantity-input');

        if (productSelect && productSelect.selectedIndex > 0) {
          const selectedOption = productSelect.options[productSelect.selectedIndex];
          const price = parseFloat(selectedOption.dataset.price || selectedOption.getAttribute('data-price'));
          const quantity = parseInt(quantityInput.value || 1);

          if (!isNaN(price) && !isNaN(quantity)) {
            total += price * quantity;
          }
        }
      });

      // Update total amount display
      let formTotalElement = document.getElementById('totalAmount');
      if (formTotalElement) {
        formTotalElement.textContent = '₹' + total.toFixed(2);
        console.log('FORM SUBMISSION: Total amount set to:', total.toFixed(2));
      }

      // Update paid amount input
      let formPaidAmountInput = document.getElementById('paidAmount');
      if (formPaidAmountInput) {
        formPaidAmountInput.setAttribute('max', total.toFixed(2));
        // Only set the value if it's empty or exceeds the total
        if (!formPaidAmountInput.value || parseFloat(formPaidAmountInput.value) > total) {
          formPaidAmountInput.value = total.toFixed(2);
        }
      }
      // Check required customer fields
      if (!customerNameInput.value.trim()) {
        e.preventDefault();
        alert('Please enter customer name');
        customerNameInput.focus();
        return false;
      }

      if (!customerPhoneInput.value.trim()) {
        e.preventDefault();
        alert('Please enter customer phone number');
        customerPhoneInput.focus();
        return false;
      }

      if (!customerPlaceInput.value.trim()) {
        e.preventDefault();
        alert('Please enter customer place');
        customerPlaceInput.focus();
        return false;
      }

      // Check work and picked by fields
      const workInput = document.getElementById('work');
      const pickedByInput = document.getElementById('pickedBy');

      if (!workInput.value.trim()) {
        e.preventDefault();
        alert('Please enter work details');
        workInput.focus();
        return false;
      }

      if (!pickedByInput.value.trim()) {
        e.preventDefault();
        alert('Please enter who picked up the order');
        pickedByInput.focus();
        return false;
      }

      // Check if at least one product is selected
      const productSelects = document.querySelectorAll('.product-select');
      let hasSelectedProduct = false;
      let emptySelectIndex = -1;

      productSelects.forEach((select, index) => {
        // Check if the select is visible (parent row is not hidden)
        const row = select.closest('.product-row');
        const isVisible = row && window.getComputedStyle(row).display !== 'none';

        if (isVisible && !select.disabled) {
          if (select.value) {
            hasSelectedProduct = true;
          } else if (emptySelectIndex === -1) {
            emptySelectIndex = index;
          }
        }
      });

      if (!hasSelectedProduct) {
        e.preventDefault();
        alert('Please select at least one product');

        // Focus on the first empty select
        if (emptySelectIndex !== -1 && productSelects[emptySelectIndex]) {
          productSelects[emptySelectIndex].focus();
        }

        return false;
      }

      // Check paid amount
      if (!paidAmountInput.value) {
        e.preventDefault();
        alert('Please enter the paid amount');
        paidAmountInput.focus();
        return false;
      }

      // Ensure the paid amount is a valid number
      const paidAmount = parseFloat(paidAmountInput.value);
      if (isNaN(paidAmount)) {
        e.preventDefault();
        alert('Please enter a valid number for the paid amount');
        paidAmountInput.focus();
        return false;
      }

      // Ensure the paid amount doesn't exceed the total
      let finalTotalElement = document.getElementById('totalAmount');
      let finalTotalText = finalTotalElement.textContent;
      let finalTotalValue = parseFloat(finalTotalText.replace('₹', ''));

      if (paidAmount > finalTotalValue) {
        e.preventDefault();
        alert('Paid amount cannot exceed the total amount');
        paidAmountInput.value = finalTotalValue.toFixed(2);
        paidAmountInput.focus();
        return false;
      }

      // All validations passed
      return true;
    });
  });
</script>

<%- include('../partials/footer') %>

<script>
  // Immediate script to fix total amount calculation
  // DIRECT FIX: Force update total amount immediately
  function updateTotalNow() {
    console.log('DIRECT FIX: Forcing immediate total update');
    const rows = document.querySelectorAll('.product-row');
    let total = 0;

    rows.forEach(row => {
      const select = row.querySelector('.product-select');
      const quantity = row.querySelector('.quantity-input');
      const amount = row.querySelector('.product-amount');

      if (select && select.selectedIndex > 0) {
        const option = select.options[select.selectedIndex];
        const price = parseFloat(option.dataset.price || option.getAttribute('data-price'));
        const qty = parseInt(quantity.value || 1);

        if (!isNaN(price) && !isNaN(qty)) {
          const rowTotal = price * qty;
          amount.value = '₹' + rowTotal.toFixed(2);
          total += rowTotal;
        }
      }
    });

    const totalElement = document.getElementById('totalAmount');
    if (totalElement) {
      totalElement.textContent = '₹' + total.toFixed(2);
      console.log('DIRECT UPDATE: Total set to ' + total.toFixed(2));
    }

    const paidInput = document.getElementById('paidAmount');
    if (paidInput) {
      paidInput.setAttribute('max', total.toFixed(2));
      paidInput.value = total.toFixed(2);
    }
  }

  // Call the update function immediately
  setTimeout(updateTotalNow, 100);
  setTimeout(updateTotalNow, 500);
  setTimeout(updateTotalNow, 1000);

  // CRITICAL FIX: Add direct event listener to product select elements
  document.addEventListener('click', function(event) {
    // Check if we clicked on or near a product select
    const productRow = event.target.closest('.product-row');
    if (productRow) {
      console.log('Clicked in product row, forcing update');
      setTimeout(updateTotalNow, 50);
    }
  });

  // CRITICAL FIX: Add MutationObserver to detect when products are loaded
  const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
        // Check if any product selects were added
        const productSelects = document.querySelectorAll('.product-select');
        if (productSelects.length > 0) {
          console.log('Product selects detected, forcing update');
          setTimeout(updateTotalNow, 50);

          // Add direct event listeners to all product selects
          productSelects.forEach(select => {
            if (!select.dataset.listenerAdded) {
              select.dataset.listenerAdded = 'true';
              select.addEventListener('change', function() {
                console.log('Product select changed directly');
                setTimeout(updateTotalNow, 50);
              });
            }
          });
        }
      }
    });
  });

  // Start observing the document
  observer.observe(document.body, { childList: true, subtree: true });

  document.addEventListener('DOMContentLoaded', function() {
    // Call the update function when DOM is loaded
    updateTotalNow();
    // IMMEDIATE FIX: Force update total amount as soon as the page loads
    setTimeout(function() {
      console.log('IMMEDIATE FIX: Forcing total amount update');
      const productRows = document.querySelectorAll('.product-row');
      let total = 0;

      productRows.forEach(row => {
        const productSelect = row.querySelector('.product-select');
        const quantityInput = row.querySelector('.quantity-input');
        const amountInput = row.querySelector('.product-amount');

        if (productSelect && productSelect.selectedIndex > 0) {
          const selectedOption = productSelect.options[productSelect.selectedIndex];
          const price = parseFloat(selectedOption.dataset.price || selectedOption.getAttribute('data-price'));
          const quantity = parseInt(quantityInput.value || 1);

          console.log('Selected product:', selectedOption.textContent);
          console.log('Price:', price);
          console.log('Quantity:', quantity);

          if (!isNaN(price) && !isNaN(quantity)) {
            const amount = price * quantity;
            amountInput.value = '₹' + amount.toFixed(2);
            total += amount;
            console.log('Row amount:', amount);
          }
        }
      });

      // Update total amount display
      const totalAmountElement = document.getElementById('totalAmount');
      if (totalAmountElement) {
        totalAmountElement.textContent = '₹' + total.toFixed(2);
        console.log('IMMEDIATE FIX: Total amount set to:', total.toFixed(2));
      }

      // Update paid amount input
      const paidAmountInput = document.getElementById('paidAmount');
      if (paidAmountInput) {
        paidAmountInput.setAttribute('max', total.toFixed(2));
        paidAmountInput.value = total.toFixed(2);
      }
    }, 100);

    // Add a direct event listener to update total when a product is selected
    document.addEventListener('change', function(e) {
      if (e.target && (e.target.classList.contains('product-select') || e.target.classList.contains('quantity-input'))) {
        console.log('Product or quantity changed, updating total immediately');
        setTimeout(function() {
          // Get all product rows
          const productRows = document.querySelectorAll('.product-row');
          let total = 0;

          productRows.forEach(row => {
            const productSelect = row.querySelector('.product-select');
            const quantityInput = row.querySelector('.quantity-input');

            if (productSelect && productSelect.selectedIndex > 0) {
              const selectedOption = productSelect.options[productSelect.selectedIndex];
              const price = parseFloat(selectedOption.dataset.price);
              const quantity = parseInt(quantityInput.value || 1);

              if (!isNaN(price) && !isNaN(quantity)) {
                total += price * quantity;
              }
            }
          });

          // Update total amount display
          const totalAmountElement = document.getElementById('totalAmount');
          if (totalAmountElement) {
            totalAmountElement.textContent = '₹' + total.toFixed(2);
            console.log(`DIRECT EVENT: Set total amount to: ₹${total.toFixed(2)}`);
          }

          // Update paid amount input
          const paidAmountInput = document.getElementById('paidAmount');
          if (paidAmountInput) {
            paidAmountInput.setAttribute('max', total.toFixed(2));
            paidAmountInput.value = total.toFixed(2);
          }
        }, 50);
      }
    });

    // Run this after a short delay to ensure all elements are loaded
    setTimeout(function() {
      console.log('Running immediate total amount fix...');

      // Get all product rows
      const productRows = document.querySelectorAll('.product-row');
      let total = 0;

      productRows.forEach(row => {
        const productSelect = row.querySelector('.product-select');
        const quantityInput = row.querySelector('.quantity-input');
        const amountInput = row.querySelector('.product-amount');

        if (productSelect && productSelect.selectedIndex > 0) {
          const selectedOption = productSelect.options[productSelect.selectedIndex];
          const price = parseFloat(selectedOption.dataset.price);
          const quantity = parseInt(quantityInput.value || 1);

          console.log('Found selected product:', {
            name: selectedOption.textContent,
            price: price,
            quantity: quantity
          });

          if (!isNaN(price) && !isNaN(quantity)) {
            const amount = price * quantity;
            amountInput.value = '₹' + amount.toFixed(2);
            total += amount;
            console.log(`Added ${amount.toFixed(2)} to total, now: ${total.toFixed(2)}`);
          }
        }
      });

      // Update total amount display
      const totalAmountElement = document.getElementById('totalAmount');
      if (totalAmountElement) {
        totalAmountElement.textContent = '₹' + total.toFixed(2);
        console.log(`FIXED: Set total amount to: ₹${total.toFixed(2)}`);
      }

      // Update paid amount input
      const paidAmountInput = document.getElementById('paidAmount');
      if (paidAmountInput) {
        paidAmountInput.setAttribute('max', total.toFixed(2));
        paidAmountInput.value = total.toFixed(2);
        console.log(`Set paid amount to: ${total.toFixed(2)}`);
      }
    }, 500);

    // Add event listeners to all product selects to update total immediately
    document.addEventListener('change', function(e) {
      if (e.target && e.target.classList.contains('product-select')) {
        console.log('Product select changed, updating total immediately');
        setTimeout(updateTotalImmediately, 50);
      }
    });

    // Function to immediately update total when a product is selected
    function updateTotalImmediately() {
      const productRows = document.querySelectorAll('.product-row');
      let total = 0;

      productRows.forEach(row => {
        const productSelect = row.querySelector('.product-select');
        const quantityInput = row.querySelector('.quantity-input');
        const amountInput = row.querySelector('.product-amount');

        if (productSelect && productSelect.selectedIndex > 0) {
          const selectedOption = productSelect.options[productSelect.selectedIndex];
          const price = parseFloat(selectedOption.dataset.price);
          const quantity = parseInt(quantityInput.value || 1);

          if (!isNaN(price) && !isNaN(quantity)) {
            const amount = price * quantity;
            amountInput.value = '₹' + amount.toFixed(2);
            total += amount;
            console.log(`Product change: Added ${amount.toFixed(2)} to total, now: ${total.toFixed(2)}`);
          }
        }
      });

      // Update total amount display
      const totalAmountElement = document.getElementById('totalAmount');
      if (totalAmountElement) {
        totalAmountElement.textContent = '₹' + total.toFixed(2);
        console.log(`Product change: Set total amount to: ₹${total.toFixed(2)}`);
      }

      // Update paid amount input
      const paidAmountInput = document.getElementById('paidAmount');
      if (paidAmountInput) {
        paidAmountInput.setAttribute('max', total.toFixed(2));
        paidAmountInput.value = total.toFixed(2);
      }
    }
  });
</script>

<!-- EMERGENCY FIX: Direct script to update total amount -->
<script>
  // EMERGENCY FIX: Add direct script to update total amount
  (function() {
    // Add direct event listener to product selects
    document.addEventListener('click', function(event) {
      // Check if we clicked on or near a product select
      if (event.target && (event.target.classList.contains('product-select') ||
          event.target.closest('.product-row'))) {
        console.log('EMERGENCY: Clicked near product, forcing update');
        setTimeout(emergencyUpdateTotal, 50);
      }
    });

    // Add direct event listener for changes
    document.addEventListener('change', function(event) {
      if (event.target && (event.target.classList.contains('product-select') ||
          event.target.classList.contains('quantity-input'))) {
        console.log('EMERGENCY: Product or quantity changed, forcing update');
        setTimeout(emergencyUpdateTotal, 50);
      }
    });
    console.log('EMERGENCY FIX: Running immediate total update');

    function emergencyUpdateTotal() {
      const rows = document.querySelectorAll('.product-row');
      let total = 0;

      rows.forEach(row => {
        const select = row.querySelector('.product-select');
        const quantity = row.querySelector('.quantity-input');

        if (select && select.selectedIndex > 0) {
          const option = select.options[select.selectedIndex];
          const price = parseFloat(option.dataset.price || option.getAttribute('data-price'));
          const qty = parseInt(quantity.value || 1);

          if (!isNaN(price) && !isNaN(qty)) {
            total += price * qty;
          }
        }
      });

      const totalElement = document.getElementById('totalAmount');
      if (totalElement) {
        totalElement.textContent = '₹' + total.toFixed(2);
        console.log('EMERGENCY FIX: Total set to ' + total.toFixed(2));
      }

      const paidInput = document.getElementById('paidAmount');
      if (paidInput) {
        paidInput.setAttribute('max', total.toFixed(2));
        paidInput.value = total.toFixed(2);
      }
    }

    // Run multiple times to ensure it catches
    setTimeout(emergencyUpdateTotal, 100);
    setTimeout(emergencyUpdateTotal, 500);
    setTimeout(emergencyUpdateTotal, 1000);
    setTimeout(emergencyUpdateTotal, 2000);
  })();
</script>
